from collections import deque

class Solution(object):
    def canFinish(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        """
        graph = {i: [] for i in range(numCourses)}
        in_degree = {i: 0 for i in range(numCourses)}

        for course, prereq in prerequisites:
            graph[prereq].append(course)
            in_degree[course] += 1

        zero_in_degree = deque([course for course in in_degree if in_degree[course] == 0])
        taken_courses = 0

        while zero_in_degree:
            course = zero_in_degree.popleft()
            taken_courses += 1
            
            for neighbor in graph[course]:
                in_degree[neighbor] -= 1
                if in_degree[neighbor] == 0:
                    zero_in_degree.append(neighbor)

        return taken_courses == numCourses
